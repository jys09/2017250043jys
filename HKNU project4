{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "2017250043 정유성 머신러닝 과제 최종본",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KX1JFXuLNArJ"
      },
      "source": [
        "* **머신러닝 과제**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n_piugWPNO1h"
      },
      "source": [
        "##**과제 1**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UgoG157clqtQ"
      },
      "source": [
        "**단계 1 : 데이터 준비**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6u1Rnh_BlnhT"
      },
      "source": [
        "모듈 불러오기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pKje2Asiig_w"
      },
      "source": [
        "import numpy as np\n",
        "from sklearn import datasets\n",
        "import pandas as pd\n",
        "iris = datasets.load_iris()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1UctJc5QlPF8"
      },
      "source": [
        "붓꽃 데이터셋의 꽃잎길이와 꽃잎너비 특성만 이용"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wo7XCjbmhDuO"
      },
      "source": [
        "X = iris[\"data\"][:, 3:]  # 1개의 특성 (꽃잎 너비)\n",
        "y = (iris[\"target\"] == 2).astype(np.int)   # 버지니카 품종일 때 1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i00E3Ra8lTVW"
      },
      "source": [
        "모든 샘플에 편향추가"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "biOluGI2hN52"
      },
      "source": [
        "X_with_bias = np.c_[np.ones([len(X), 1]), X]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dWEIMZ8MlaR1"
      },
      "source": [
        "결과를 일정하게 유지하기 위해 랜덤 시드 지정"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pW6MLl72hQGv"
      },
      "source": [
        "np.random.seed(2042)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0zaAM2EihesK"
      },
      "source": [
        "**단계 2 : 데이터셋 분할**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WsbBdM1Bhgqy"
      },
      "source": [
        "test_ratio = 0.2                                         # 테스트 세트 비율 = 20%\n",
        "validation_ratio = 0.2                                   # 검증 세트 비율 = 20%\n",
        "total_size = len(X_with_bias)                            # 전체 데이터셋 크기\n",
        "\n",
        "test_size = int(total_size * test_ratio)                 # 테스트 세트 크기: 전체의 20%\n",
        "validation_size = int(total_size * validation_ratio)     # 검증 세트 크기: 전체의 20%\n",
        "train_size = total_size - test_size - validation_size    # 훈련 세트 크기: 전체의 60%"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eBdaJ4K5qeVo"
      },
      "source": [
        "인덱스 무작위로 섞기"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yYl0azdJhiSQ"
      },
      "source": [
        "rnd_indices = np.random.permutation(total_size)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4MlBmS-FqhP7"
      },
      "source": [
        "6:2:2 비율로 훈련, 검증, 테스트 세트를 분할"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DaAJnd5WhkKw"
      },
      "source": [
        "X_train = X_with_bias[rnd_indices[:train_size]]\n",
        "y_train = y[rnd_indices[:train_size]]\n",
        "\n",
        "X_valid = X_with_bias[rnd_indices[train_size:-test_size]]\n",
        "y_valid = y[rnd_indices[train_size:-test_size]]\n",
        "\n",
        "X_test = X_with_bias[rnd_indices[-test_size:]]\n",
        "y_test = y[rnd_indices[-test_size:]]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4N7BEF8_n0th"
      },
      "source": [
        "**단계 3 : 로지스틱 함수 구현**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ebiM_ccNn7I7"
      },
      "source": [
        "def logistic_sigmoid(x): # 시그모이드 함수 정의\n",
        "    return 1 / (1 + np.exp(-x))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TCwmhOM6tuFs"
      },
      "source": [
        "**단계 4 : 경사하강법 활용 훈련**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "phNtSutktwm8"
      },
      "source": [
        "n_inputs = X_train.shape[1]           # 특성 수(n) + 1, 붓꽃의 경우: 특성 2개 + 1\n",
        "n_outputs = len(np.unique(y_train))   # 중복을 제거한 클래스 수(K), 붓꽃의 경우: 3개"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ZYxm9N1t1JK"
      },
      "source": [
        "파라미터를 무작위로 초기 설정"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EgWpyMk2tzOQ"
      },
      "source": [
        "Theta = np.random.randn(n_inputs, 1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SYQiRpw_wihw",
        "outputId": "351fb687-1738-4912-a84e-234df2751120"
      },
      "source": [
        "#  배치 경사하강법 구현\n",
        "eta = 0.01\n",
        "n_iterations = 5001\n",
        "m = len(X_train)\n",
        "epsilon = 1e-7\n",
        "y_train = y_train.reshape(90,1)\n",
        "\n",
        "for iteration in range(n_iterations):     # 5001번 반복 훈련\n",
        "    logits = X_train.dot(Theta)\n",
        "    Y_proba = logistic_sigmoid(logits)\n",
        "    \n",
        "    if iteration % 500 == 0:              # 500 에포크마다 손실(비용) 계산해서 출력\n",
        "        loss = -1/m*(np.sum(y_train * np.log(Y_proba + epsilon) + (1 - y_train) * np.log(1 - Y_proba + epsilon)))\n",
        "        print(iteration, loss)\n",
        "\n",
        "    Y_proba = np.where(Y_proba >= 0.5, 1, 0)\n",
        "    #print(Y_proba)\n",
        "    \n",
        "    error = Y_proba - y_train     # 그레이디언트 계산.\n",
        "    #print(error)\n",
        "    gradients = 1/m * X_train.T.dot(error)\n",
        "    \n",
        "    Theta = Theta - eta * gradients       # 파라미터 업데이트"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 0.7367920641625514\n",
            "500 0.6913052093118407\n",
            "1000 0.6914566500022249\n",
            "1500 0.6913969427170582\n",
            "2000 0.6915484030341011\n",
            "2500 0.6914886904050195\n",
            "3000 0.6914289977295667\n",
            "3500 0.6913583974477105\n",
            "4000 0.6915098561489456\n",
            "4500 0.6914501370427001\n",
            "5000 0.6913904378900846\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6oWNX40DNah_"
      },
      "source": [
        "학습된 파라미터"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R6-MWjYJCJ3L",
        "outputId": "f9d302af-f744-4895-daa7-d9a738858f9e"
      },
      "source": [
        "Theta"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.00836306],\n",
              "       [ 0.00500979]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HENCFayBCOzY"
      },
      "source": [
        "배치 경사하강법에 대한 정확성 점수 계산"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H4TH8O-XCOQ6",
        "outputId": "e4b4e380-9421-49fa-b0c9-808baa4e3857"
      },
      "source": [
        "logits = X_valid.dot(Theta)              \n",
        "Y_proba = logistic_sigmoid(logits)\n",
        "Y_proba_1 = np.where(Y_proba >= 0.5, 1,0)\n",
        "y_predict = Y_proba_1         # 가장 높은 확률을 갖는 클래스 선택\n",
        "\n",
        "y_valid = y_valid.reshape(30,1)\n",
        "\n",
        "accuracy_score = np.mean(y_predict == y_valid)  # 정확도 계산\n",
        "accuracy_score"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9666666666666667"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AgaA6cSheaUS"
      },
      "source": [
        "**단계 5 : 규제가 추가된 경사하강법 활용 훈련**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eZExx1gII293",
        "outputId": "bdc2f675-03fc-4550-ebe1-e9780a240e50"
      },
      "source": [
        "eta = 0.1\n",
        "n_iterations = 5001\n",
        "m = len(X_train)\n",
        "epsilon = 1e-7\n",
        "alpha = 0.1        # 규제 하이퍼파라미터\n",
        "y_train = y_train.reshape(90,1)\n",
        "\n",
        "Theta = np.random.randn(n_inputs, 1)  # 파라미터 새로 초기화\n",
        "\n",
        "for iteration in range(n_iterations):\n",
        "    logits = X_train.dot(Theta)\n",
        "    Y_proba = logistic_sigmoid(logits)\n",
        "    \n",
        "    if iteration % 500 == 0:\n",
        "        xentropy_loss = -1/m*(np.sum(y_train * np.log(Y_proba + epsilon) + (1 - y_train) * np.log(1 - Y_proba + epsilon)))\n",
        "        l2_loss = 1/2 * np.sum(np.square(Theta[1:]))  # 편향은 규제에서 제외\n",
        "        loss = xentropy_loss + alpha * l2_loss        # l2 규제가 추가된 손실\n",
        "        print(iteration, loss)\n",
        "    \n",
        "    error = Y_proba - y_train\n",
        "    l2_loss_gradients = np.r_[np.zeros([1, 1]), alpha * Theta[1:]]   # l2 규제 그레이디언트\n",
        "    gradients = 1/m * X_train.T.dot(error) + l2_loss_gradients\n",
        "    \n",
        "    Theta = Theta - eta * gradients"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 0.6618882978672164\n",
            "500 0.46565264086886404\n",
            "1000 0.4649817170971969\n",
            "1500 0.4649761853058078\n",
            "2000 0.4649761373560999\n",
            "2500 0.46497613693929357\n",
            "3000 0.46497613693573697\n",
            "3500 0.46497613693571294\n",
            "4000 0.4649761369357133\n",
            "4500 0.46497613693571344\n",
            "5000 0.4649761369357135\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EU3UTTEgJIF3"
      },
      "source": [
        "규제가 추가된 경사하강법에 대한 정확성 점수"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g4eAQY9IJPZW",
        "outputId": "16d94c47-fccf-4c27-fc25-e705e938d720"
      },
      "source": [
        "logits = X_valid.dot(Theta)\n",
        "Y_proba = logistic_sigmoid(logits)\n",
        "Y_proba_1 = np.where(Y_proba >= 0.5, 1,0)\n",
        "y_predict = Y_proba_1         # 가장 높은 확률을 갖는 클래스 선택\n",
        "\n",
        "accuracy_score = np.mean(y_predict == y_valid)\n",
        "accuracy_score"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YhSfX9jrJq17"
      },
      "source": [
        "**단계 6 : 조기 종료 추가**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BGWT6bBBJsbg",
        "outputId": "c9bb36ea-78ad-40b7-e3f3-6127e5e8b492"
      },
      "source": [
        "eta = 0.005\n",
        "n_iterations = 5001\n",
        "m = len(X_train)\n",
        "epsilon = 1e-7\n",
        "alpha = 0.1            # 규제 하이퍼파라미터\n",
        "best_loss = np.infty   # 최소 손실값 기억 변수\n",
        "\n",
        "Theta = np.random.randn(n_inputs, 1)  # 파라미터 새로 초기화\n",
        "\n",
        "for iteration in range(n_iterations):\n",
        "    # 훈련 및 손실 계산\n",
        "    logits = X_train.dot(Theta)\n",
        "    Y_proba = logistic_sigmoid(logits)\n",
        "    error = Y_proba - y_train\n",
        "    gradients = 1/m * X_train.T.dot(error) + np.r_[np.zeros([1, 1]), alpha * Theta[1:]]\n",
        "    Theta = Theta - eta * gradients\n",
        "\n",
        "    # 검증 세트에 대한 손실 계산\n",
        "    logits = X_valid.dot(Theta)\n",
        "    Y_proba_veri = logistic_sigmoid(logits)\n",
        "    xentropy_loss = -1/m*(np.sum(y_valid * np.log(Y_proba_veri + epsilon) + (1 - y_valid) * np.log(1 - Y_proba_veri + epsilon)))\n",
        "    l2_loss = 1/2 * np.sum(np.square(Theta[1:]))\n",
        "    loss = xentropy_loss + alpha * l2_loss\n",
        "    \n",
        "    # 500 에포크마다 검증 세트에 대한 손실 출력\n",
        "    if iteration % 500 == 0:\n",
        "        print(iteration, loss)\n",
        "        \n",
        "    # 에포크마다 최소 손실값 업데이트\n",
        "    if loss < best_loss:\n",
        "        best_loss = loss\n",
        "    else:                                      # 에포크가 줄어들지 않으면 바로 훈련 종료\n",
        "        print(iteration - 1, best_loss)        # 종료되지 이전 에포크의 손실값 출력\n",
        "        print(iteration, loss, \"조기 종료!\")\n",
        "        break"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 0.3316323837797527\n",
            "500 0.20318737444537002\n",
            "1000 0.19243960621537481\n",
            "1500 0.1880646732824296\n",
            "2000 0.1861265275676014\n",
            "2395 0.18574640481491134\n",
            "2396 0.18574640666650474 조기 종료!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hsdlP5sxN0ZX"
      },
      "source": [
        "조기 종료가 추가된 검증세트에 대한 정확도 점수"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V8Oar9mWiJlv",
        "outputId": "de5c6bae-db92-464c-d8d4-5e42ec1138ae"
      },
      "source": [
        "logits = X_valid.dot(Theta)\n",
        "Y_proba = logistic_sigmoid(logits)\n",
        "Y_proba_1 = np.where(Y_proba >= 0.5, 1,0)\n",
        "y_predict = Y_proba_1         # 가장 높은 확률을 갖는 클래스 선택\n",
        "\n",
        "accuracy_score = np.mean(y_predict == y_valid)\n",
        "accuracy_score"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4yLLkBJTV0j2"
      },
      "source": [
        "**단계 7 : 테스트 세트 평가**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hMNT9US3V0C2",
        "outputId": "3c2b64f0-32ea-4ee6-afc3-c15c03dee007"
      },
      "source": [
        "logits = X_test.dot(Theta)\n",
        "Y_proba = logistic_sigmoid(logits)\n",
        "Y_proba_1 = np.where(Y_proba >= 0.5, 1,0)\n",
        "y_predict = Y_proba_1         # 가장 높은 확률을 갖는 클래스 선택\n",
        "\n",
        "y_test = y_test.reshape(30,1)\n",
        "\n",
        "accuracy_score = np.mean(y_predict == y_test)\n",
        "accuracy_score"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vL3pNnKgDQX2"
      },
      "source": [
        "##**과제2**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O8xDSFUYkTkD"
      },
      "source": [
        "과제1과 겹치는 내용의 설명은 생략하겠음."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vu7-OFJWj0Vd"
      },
      "source": [
        "**단계 1 : 데이터 준비**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bhyxdY5hj1sT"
      },
      "source": [
        "X = iris[\"data\"][:, 3:]  # 1개의 특성 (꽃잎 너비)\n",
        "y = (iris[\"target\"])   # 버지니카 품종일 때 1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZHB-jXvhkLWe"
      },
      "source": [
        "X_with_bias = np.c_[np.ones([len(X), 1]), X]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vAhY9Du3kLWe"
      },
      "source": [
        "np.random.seed(2042)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gFtKMsEYkQco"
      },
      "source": [
        "**단계 2 : 데이터셋 분할**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cQJ1cnQUkLWe"
      },
      "source": [
        "test_ratio = 0.2                                         # 테스트 세트 비율 = 20%\n",
        "validation_ratio = 0.2                                   # 검증 세트 비율 = 20%\n",
        "total_size = len(X_with_bias)                            # 전체 데이터셋 크기\n",
        "\n",
        "test_size = int(total_size * test_ratio)                 # 테스트 세트 크기: 전체의 20%\n",
        "validation_size = int(total_size * validation_ratio)     # 검증 세트 크기: 전체의 20%\n",
        "train_size = total_size - test_size - validation_size    # 훈련 세트 크기: 전체의 60%"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BOBWLutCkLWf"
      },
      "source": [
        "rnd_indices = np.random.permutation(total_size)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CeVWXdm9kLWf"
      },
      "source": [
        "X_train = X_with_bias[rnd_indices[:train_size]]\n",
        "y_train = y[rnd_indices[:train_size]]\n",
        "\n",
        "X_valid = X_with_bias[rnd_indices[train_size:-test_size]]\n",
        "y_valid = y[rnd_indices[train_size:-test_size]]\n",
        "\n",
        "X_test = X_with_bias[rnd_indices[-test_size:]]\n",
        "y_test = y[rnd_indices[-test_size:]]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DKhxfo5LH9xT"
      },
      "source": [
        "**단계 3 : 타깃 변환**\n",
        "\n",
        "타깃은 0, 1, 2로 설정되어 있다. 차례대로 세토사, 버시컬러, 버지니카 품종을 가리킨다.\n",
        "훈련 세트의 첫 5개 샘플의 품종은 다음과 같다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SMB0kDaZH9xT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9b218177-1d95-41fa-b387-fa25219b4f8f"
      },
      "source": [
        "y_train[:5]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 2, 1, 1])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bLX41tZsH9xT"
      },
      "source": [
        "학습을 위해 타깃을 원-핫 벡터로 변환해야 한다. \n",
        "이유는 소프트맥스 회귀는 샘플이 주어지면 각 클래스별로 속할 확률을 구하고\n",
        "구해진 결과를 실제 확률과 함께 이용하여 비용함수를 계산하기 때문이다. \n",
        "\n",
        "붓꽃 데이터의 경우 세 개의 품종 클래스별로 속할 확률을 계산해야 하기 때문에 \n",
        "품종을 0, 1, 2 등의 하나의 숫자로 두기 보다는 해당 클래스는 1, 나머지는 0인\n",
        "확률값으로 이루어진 어레이로 다루어야 소프트맥스 회귀가 계산한 클래스별 확률과 \n",
        "연결된다.\n",
        "\n",
        "아래 함수 `to_one_hot()` 함수는 길이가 m이면서 0, 1, 2로 이루어진 1차원 어레이가 입력되면\n",
        "(m, 3) 모양의 원-핫 벡터를 반환한다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XoVGDLXIH9xT"
      },
      "source": [
        "def to_one_hot(y):\n",
        "    n_classes = y.max() + 1                 # 클래스 수\n",
        "    m = len(y)                              # 샘플 수\n",
        "    Y_one_hot = np.zeros((m, n_classes))    # (샘플 수, 클래스 수) 0-벡터 생성\n",
        "    Y_one_hot[np.arange(m), y] = 1          # 샘플 별로 해당 클래스의 값만 1로 변경. (넘파이 인덱싱 활용)\n",
        "    return Y_one_hot"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DpszmlFhH9xT"
      },
      "source": [
        "샘플 5개에 대해 잘 작동하는 것을 확인할 수 있다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g1tqxHUhH9xT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e44be66f-40c6-49b0-bf2d-cd523bfabfd0"
      },
      "source": [
        "y_train[:5]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 2, 1, 1])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3tkNJ9NoH9xU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "81fabe19-7d22-4edc-edfa-91eafb954f1d"
      },
      "source": [
        "to_one_hot(y_train[:5])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0.],\n",
              "       [0., 1., 0.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 1., 0.],\n",
              "       [0., 1., 0.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9mQQlKzDH9xU"
      },
      "source": [
        "이제 훈련/검증/테스트 세트의 타깃을 모두 원-핫 벡터로 변환한다."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3_sNC5ndH9xU"
      },
      "source": [
        "Y_train_one_hot = to_one_hot(y_train)\n",
        "Y_valid_one_hot = to_one_hot(y_valid)\n",
        "Y_test_one_hot = to_one_hot(y_test)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-BgAUETSoa8z",
        "outputId": "935ee522-1fc5-48fc-dd0b-c9e8d50718c7"
      },
      "source": [
        "Y_train_one_hot[:5]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0.],\n",
              "       [0., 1., 0.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 1., 0.],\n",
              "       [0., 1., 0.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PcbnZ5UvlwwI"
      },
      "source": [
        "Y_train_ont_hot은 90x3 행렬이다. 90x3 행렬의 각 열에는\n",
        "* 0: 세토사(Iris-Setosa)\n",
        "* 1: 버시컬러(Iris-Versicolor)\n",
        "* 2: 버지니카(Iris-Virginica)\n",
        "\n",
        "에 대한 정보가 true 일경우 1로, false 일경우 0으로 저장되어있음.\n",
        "\n",
        "각 붓꽃의 품종에 대해 일대다(OvR) 방식으로 로지스틱회귀를 취하기 위해선 각 열을 분리시켜 주어야함."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kiFOqd4gneP6"
      },
      "source": [
        "Setosa_train_one_hot = Y_train_one_hot[:,0]\n",
        "Versicolor_train_one_hot = Y_train_one_hot[:,1]\n",
        "Virginica_train_one_hot = Y_train_one_hot[:,2]\n",
        "\n",
        "Setosa_valid_one_hot = Y_valid_one_hot[:,0]\n",
        "Versicolor_valid_one_hot = Y_valid_one_hot[:,1]\n",
        "Virginica_valid_one_hot = Y_valid_one_hot[:,2]\n",
        "\n",
        "Setosa_test_one_hot = Y_test_one_hot[:,0]\n",
        "Versicolor_test_one_hot = Y_test_one_hot[:,1]\n",
        "Virginica_test_one_hot = Y_test_one_hot[:,2]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qyVWC7v7DMx-"
      },
      "source": [
        "각 one_hot 벡터들을 m*1 행렬로 reshape"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "odDBGDFRDMee"
      },
      "source": [
        "Setosa_train_one_hot = Setosa_train_one_hot.reshape(90,1)\n",
        "Versicolor_train_one_hot = Versicolor_train_one_hot.reshape(90,1)\n",
        "Virginica_train_one_hot = Virginica_train_one_hot.reshape(90,1)\n",
        "\n",
        "Setosa_valid_one_hot = Setosa_valid_one_hot.reshape(30,1)\n",
        "Versicolor_valid_one_hot = Versicolor_valid_one_hot.reshape(30,1)\n",
        "Virginica_valid_one_hot = Virginica_valid_one_hot.reshape(30,1)\n",
        "\n",
        "Setosa_test_one_hot = Setosa_test_one_hot.reshape(30,1)\n",
        "Versicolor_test_one_hot = Versicolor_test_one_hot.reshape(30,1)\n",
        "Virginica_test_one_hot = Virginica_test_one_hot.reshape(30,1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z8bQkn-Bk2c2"
      },
      "source": [
        "**단계 4 : 로지스틱 함수 구현**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2MkdiJyYk8Jg"
      },
      "source": [
        "def logistic_sigmoid(x): # 시그모이드 함수 정의\n",
        "    return 1 / (1 + np.exp(-x))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ED3vieAi5wtN"
      },
      "source": [
        "**단계 5 : 활용 훈련**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7sEpLTfKCecd"
      },
      "source": [
        "n_inputs = X_train.shape[1]           # 특성 수(n) + 1, 붓꽃의 경우: 특성 2개 + 1\n",
        "n_outputs = len(np.unique(y_train))   # 중복을 제거한 클래스 수(K), 붓꽃의 경우: 3개"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rRQF4sHoEwXg"
      },
      "source": [
        "0: 세토사(Iris-Setosa) 품종에 대한 조기 종료 활용"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "exkXFcN8_61X",
        "outputId": "c997fc7d-5765-43e2-d274-b0c3566cbbeb"
      },
      "source": [
        "eta = 0.08\n",
        "n_iterations = 5001\n",
        "m = len(X_train)\n",
        "epsilon = 1e-7\n",
        "alpha = 0.005            # 규제 하이퍼파라미터\n",
        "best_loss = np.infty   # 최소 손실값 기억 변수\n",
        "\n",
        "Theta1 = np.random.randn(n_inputs, 1)  # 파라미터 새로 초기화\n",
        "\n",
        "for iteration in range(n_iterations):\n",
        "    # 훈련 및 손실 계산\n",
        "    logits = X_train.dot(Theta1)\n",
        "    Y_proba = logistic_sigmoid(logits)\n",
        "    error = Y_proba - Setosa_train_one_hot\n",
        "    gradients = 1/m * X_train.T.dot(error) + np.r_[np.zeros([1, 1]), alpha * Theta1[1:]]\n",
        "    Theta1 = Theta1 - eta * gradients\n",
        "\n",
        "    # 검증 세트에 대한 손실 계산\n",
        "    logits = X_valid.dot(Theta1)\n",
        "    Y_proba_veri = logistic_sigmoid(logits)\n",
        "    xentropy_loss = -1/m*(np.sum(Setosa_valid_one_hot * np.log(Y_proba_veri + epsilon) + (1 - Setosa_valid_one_hot) * np.log(1 - Y_proba_veri + epsilon)))\n",
        "    l2_loss = 1/2 * np.sum(np.square(Theta1[1:]))\n",
        "    loss = xentropy_loss + alpha * l2_loss\n",
        "    \n",
        "    # 500 에포크마다 검증 세트에 대한 손실 출력\n",
        "    if iteration % 500 == 0:\n",
        "        print(iteration, loss)\n",
        "        \n",
        "    # 에포크마다 최소 손실값 업데이트\n",
        "    if loss < best_loss:\n",
        "        best_loss = loss\n",
        "    else:                                      # 에포크가 줄어들지 않으면 바로 훈련 종료\n",
        "        print(iteration - 1, best_loss)        # 종료되지 이전 에포크의 손실값 출력\n",
        "        print(iteration, loss, \"조기 종료!\")\n",
        "        break"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 0.1942305470183407\n",
            "500 0.0713123891503352\n",
            "694 0.07012518581596847\n",
            "695 0.0701251934308839 조기 종료!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-xIjxBKaE47N"
      },
      "source": [
        "1: 버시컬러(Iris-Versicolor) 품종에 대한 조기 종료 활용"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-QWkiqzUE3GU",
        "outputId": "1f0175d7-8d26-437c-b819-aa51b11edaec"
      },
      "source": [
        "eta = 0.07\n",
        "n_iterations = 5001\n",
        "m = len(X_train)\n",
        "epsilon = 1e-7\n",
        "alpha = 0.005          # 규제 하이퍼파라미터\n",
        "best_loss = np.infty   # 최소 손실값 기억 변수\n",
        "\n",
        "Theta2 = np.random.randn(n_inputs, 1)  # 파라미터 새로 초기화\n",
        "\n",
        "for iteration in range(n_iterations):\n",
        "    # 훈련 및 손실 계산\n",
        "    logits = X_train.dot(Theta2)\n",
        "    Y_proba = logistic_sigmoid(logits)\n",
        "    error = Y_proba - Versicolor_train_one_hot\n",
        "    gradients = 1/m * X_train.T.dot(error) + np.r_[np.zeros([1, 1]), alpha * Theta2[1:]]\n",
        "    Theta2 = Theta2 - eta * gradients\n",
        "\n",
        "    # 검증 세트에 대한 손실 계산\n",
        "    logits = X_valid.dot(Theta2)\n",
        "    Y_proba_veri = logistic_sigmoid(logits)\n",
        "    xentropy_loss = -1/m*(np.sum(Versicolor_valid_one_hot * np.log(Y_proba_veri + epsilon) + (1 - Versicolor_valid_one_hot) * np.log(1 - Y_proba_veri + epsilon)))\n",
        "    l2_loss = 1/2 * np.sum(np.square(Theta2[1:]))\n",
        "    loss = xentropy_loss + alpha * l2_loss\n",
        "    \n",
        "    # 500 에포크마다 검증 세트에 대한 손실 출력\n",
        "    if iteration % 500 == 0:\n",
        "        print(iteration, loss)\n",
        "        \n",
        "    # 에포크마다 최소 손실값 업데이트\n",
        "    if loss < best_loss:\n",
        "        best_loss = loss\n",
        "    else:                                      # 에포크가 줄어들지 않으면 바로 훈련 종료\n",
        "        print(iteration - 1, best_loss)        # 종료되지 이전 에포크의 손실값 출력\n",
        "        print(iteration, loss, \"조기 종료!\")\n",
        "        break"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 0.3724096545512761\n",
            "367 0.218993700746672\n",
            "368 0.21899372701315967 조기 종료!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nUuGU1JVFWkI"
      },
      "source": [
        "2: 버지니카(Iris-Virginica) 품종에 대한 조기 종료 활용"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jru3kuEeFbK0",
        "outputId": "bfb9e072-9504-44c6-e5a7-2476717251bb"
      },
      "source": [
        "eta = 0.08\n",
        "n_iterations = 5001\n",
        "m = len(X_train)\n",
        "epsilon = 1e-7\n",
        "alpha = 0.005        # 규제 하이퍼파라미터\n",
        "best_loss = np.infty   # 최소 손실값 기억 변수\n",
        "\n",
        "Theta3 = np.random.randn(n_inputs, 1)  # 파라미터 새로 초기화\n",
        "\n",
        "for iteration in range(n_iterations):\n",
        "    # 훈련 및 손실 계산\n",
        "    logits = X_train.dot(Theta3)\n",
        "    Y_proba = logistic_sigmoid(logits)\n",
        "    error = Y_proba - Virginica_train_one_hot\n",
        "    gradients = 1/m * X_train.T.dot(error) + np.r_[np.zeros([1, 1]), alpha * Theta3[1:]]\n",
        "    Theta3 = Theta3 - eta * gradients\n",
        "\n",
        "    # 검증 세트에 대한 손실 계산\n",
        "    logits = X_valid.dot(Theta3)\n",
        "    Y_proba_veri = logistic_sigmoid(logits)\n",
        "    xentropy_loss = -1/m*(np.sum(Virginica_valid_one_hot * np.log(Y_proba_veri + epsilon) + (1 - Virginica_valid_one_hot) * np.log(1 - Y_proba_veri + epsilon)))\n",
        "    l2_loss = 1/2 * np.sum(np.square(Theta3[1:]))\n",
        "    loss = xentropy_loss + alpha * l2_loss\n",
        "    \n",
        "    # 500 에포크마다 검증 세트에 대한 손실 출력\n",
        "    if iteration % 500 == 0:\n",
        "        print(iteration, loss)\n",
        "        \n",
        "    # 에포크마다 최소 손실값 업데이트\n",
        "    if loss < best_loss:\n",
        "        best_loss = loss\n",
        "    else:                                      # 에포크가 줄어들지 않으면 바로 훈련 종료\n",
        "        print(iteration - 1, best_loss)        # 종료되지 이전 에포크의 손실값 출력\n",
        "        print(iteration, loss, \"조기 종료!\")\n",
        "        break"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 0.30051317265766586\n",
            "500 0.11440446122769776\n",
            "1000 0.10241684411484213\n",
            "1500 0.09958112692021259\n",
            "1820 0.09926349977734265\n",
            "1821 0.09926350015409136 조기 종료!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7nEOo87KGO6I"
      },
      "source": [
        "조기 종료 검증 세트에 대한 정확도 검사"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RwY7XfX0GT2Z",
        "outputId": "ef7714c5-9150-4226-aa1c-1805e7561aa2"
      },
      "source": [
        "logits_Setosa = X_valid.dot(Theta1)\n",
        "logits_Versicolor = X_valid.dot(Theta2)\n",
        "logits_Virginica = X_valid.dot(Theta3)\n",
        "\n",
        "Y_proba_Setosa = logistic_sigmoid(logits_Setosa)\n",
        "Y_proba_Versicolor = logistic_sigmoid(logits_Versicolor)\n",
        "Y_proba_Virginica = logistic_sigmoid(logits_Virginica)\n",
        "\n",
        "Y_proba = np.hstack((Y_proba_Setosa, Y_proba_Versicolor, Y_proba_Virginica)) # 각 품종을 하나의 행렬로 합침\n",
        "\n",
        "y_predict = np.argmax(Y_proba, axis=1)    # 가장 높은 확률을 갖는 클래스 선택\n",
        "\n",
        "accuracy_score = np.mean(y_predict == y_valid)\n",
        "accuracy_score"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hOiGRF2LNNTF"
      },
      "source": [
        "**단계 6 : 테스트 세트 평가**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c56JvJe1KdYZ",
        "outputId": "a0de5782-d6bb-4c67-8ad5-14a0406912f7"
      },
      "source": [
        "logits_Setosa = X_test.dot(Theta1)\n",
        "logits_Versicolor = X_test.dot(Theta2)\n",
        "logits_Virginica = X_test.dot(Theta3)\n",
        "\n",
        "Y_proba_Setosa = logistic_sigmoid(logits_Setosa)\n",
        "Y_proba_Versicolor = logistic_sigmoid(logits_Versicolor)\n",
        "Y_proba_Virginica = logistic_sigmoid(logits_Virginica)\n",
        "\n",
        "Y_proba = np.hstack((Y_proba_Setosa, Y_proba_Versicolor, Y_proba_Virginica)) # 각 품종을 하나의 행렬로 합침\n",
        "\n",
        "y_predict = np.argmax(Y_proba, axis=1)    # 가장 높은 확률을 갖는 클래스 선택\n",
        "\n",
        "accuracy_score = np.mean(y_predict == y_test)\n",
        "accuracy_score"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9333333333333333"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RQmr3To7GN-I",
        "outputId": "6d806e17-0c6e-4c4e-958f-233dc5344a17"
      },
      "source": [
        "Y_proba"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.02544245, 0.37689054, 0.61690041],\n",
              "       [0.00940703, 0.38078113, 0.80942586],\n",
              "       [0.00940703, 0.38078113, 0.80942586],\n",
              "       [0.27912362, 0.36659408, 0.10813728],\n",
              "       [0.12345679, 0.37044157, 0.24231312],\n",
              "       [0.27912362, 0.36659408, 0.10813728],\n",
              "       [0.85169263, 0.35641801, 0.009047  ],\n",
              "       [0.85169263, 0.35641801, 0.009047  ],\n",
              "       [0.85169263, 0.35641801, 0.009047  ],\n",
              "       [0.02544245, 0.37689054, 0.61690041],\n",
              "       [0.85169263, 0.35641801, 0.009047  ],\n",
              "       [0.12345679, 0.37044157, 0.24231312],\n",
              "       [0.04873586, 0.37430557, 0.45756031],\n",
              "       [0.74530957, 0.35895032, 0.01712987],\n",
              "       [0.16479144, 0.36915722, 0.18795856],\n",
              "       [0.09135606, 0.37172775, 0.30645418],\n",
              "       [0.02544245, 0.37689054, 0.61690041],\n",
              "       [0.00481576, 0.38338342, 0.89020773],\n",
              "       [0.01312852, 0.37948254, 0.75454355],\n",
              "       [0.85169263, 0.35641801, 0.009047  ],\n",
              "       [0.00245978, 0.38599241, 0.9393145 ],\n",
              "       [0.27912362, 0.36659408, 0.10813728],\n",
              "       [0.85169263, 0.35641801, 0.009047  ],\n",
              "       [0.00481576, 0.38338342, 0.89020773],\n",
              "       [0.85169263, 0.35641801, 0.009047  ],\n",
              "       [0.85169263, 0.35641801, 0.009047  ],\n",
              "       [0.04873586, 0.37430557, 0.45756031],\n",
              "       [0.74530957, 0.35895032, 0.01712987],\n",
              "       [0.01829508, 0.37818567, 0.68991095],\n",
              "       [0.12345679, 0.37044157, 0.24231312]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SHL3PdGqF2sF",
        "outputId": "876395c9-23ff-4470-8b87-d17b6e3e8acb"
      },
      "source": [
        "y_predict"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 2, 2, 1, 1, 1, 0, 0, 0, 2, 0, 1, 2, 0, 1, 1, 2, 2, 2, 0, 2, 1,\n",
              "       0, 2, 0, 0, 2, 0, 2, 1])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 40
        }
      ]
    }
  ]
}
